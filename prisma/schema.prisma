// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    mylist        Media[]   @relation("mylistRelation")
    watchList     Media[]   @relation("watchlistRelation")
    favorites     Media[]   @relation("favoritesRelation")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Media {
    id                 Int      @id @map("_id")
    title              String?
    name               String?
    poster_path        String?
    adult              Boolean?
    overview           String?
    release_date       String?
    media_type         String
    genre_ids          Int[]
    original_title     String?
    original_language  String?
    backdrop_path      String?
    popularity         Float?
    vote_count         Int?
    video              Boolean?
    vote_average       Float?
    first_air_date     String?
    last_air_date      String?
    runtime            Int?
    status             String?
    number_of_episodes Int?
    number_of_seasons  Int?
    type               String?
    images             Json?
    videos             Json?
    tagline            String?
    genres             Json?
    original_name      String?
    // languages          Json?
    // in_production      Boolean?
    // homepage           String?
    // episode_run_time   Json?
    // created_by         Json?
    // spoken_languages     Json?
    // seasons              Json?
    // production_countries Json?
    // production_companies Json?
    // origin_country       String?
    // networks             Json?
    // next_episode_to_air  Json?
    // last_episode_to_air  Json?
    userMyList         User?    @relation("mylistRelation", fields: [userId], references: [id])
    userId             String?  @db.ObjectId
    userWatchList      User?    @relation("watchlistRelation", fields: [userId], references: [id])
    userFavorites      User?    @relation("favoritesRelation", fields: [userId], references: [id])
}
